{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/satyabrat/Desktop/Learn/React/bill-split/src/Components/Summary.js\";\nimport React, { Component } from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nclass Summary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      transactions: []\n    };\n\n    this.calculateTransactions = () => {\n      const {\n        personList,\n        paymentList,\n        numberOfPeople\n      } = this.props;\n      let paid = {},\n          n = numberOfPeople,\n          willGet = {},\n          transactions = [];\n      personList.forEach(person => {\n        paid[person.name] = 0;\n        willGet[person.name] = 0;\n      });\n      paymentList.forEach(payment => {\n        paid[payment.paidBy] += parseInt(payment.amount);\n      });\n\n      for (let i = 0, id = 0; i < n; i++) {\n        let curr = personList[i];\n\n        for (let j = i + 1; j < n; j++) {\n          let other = personList[j];\n          if (paid[curr.name] === paid[other.name]) continue;\n          let transaction = Math.abs(paid[curr.name] - paid[other.name]);\n          transaction /= n * 1.0;\n          if (paid[curr.name] >= paid[other.name]) transactions.push([other, curr, transaction, id]);else transactions.push([curr, other, transaction, id]);\n          ++id;\n        }\n      }\n\n      this.setState({\n        transactions: transactions\n      });\n    };\n\n    this.getSteps = () => {\n      return this.state.transactions.map(edge => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: edge[0] + \" pays to \" + edge[1],\n            secondary: edge[2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this);\n      });\n    };\n\n    this.calculateTransactions();\n  }\n\n  render() {\n    this.calculateTransactions();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        gutterBottom: true,\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        style: {\n          width: '100%',\n          maxWidth: 360\n        },\n        children: this.getSteps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Summary;","map":{"version":3,"sources":["/home/satyabrat/Desktop/Learn/React/bill-split/src/Components/Summary.js"],"names":["React","Component","Typography","List","ListItem","ListItemText","Summary","constructor","props","state","transactions","calculateTransactions","personList","paymentList","numberOfPeople","paid","n","willGet","forEach","person","name","payment","paidBy","parseInt","amount","i","id","curr","j","other","transaction","Math","abs","push","setState","getSteps","map","edge","render","width","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nclass Summary extends Component{\n    state = {\n        transactions : [],\n    }\n\n    constructor(props){\n        super(props);\n        this.calculateTransactions();\n    }\n\n    calculateTransactions = ()=>{\n        const {personList, paymentList, numberOfPeople} = this.props;\n        let paid = {}, n = numberOfPeople, willGet = {}, transactions = [];\n        personList.forEach(person => {\n            paid[person.name] = 0;\n            willGet[person.name] = 0;\n        });\n\n        paymentList.forEach(payment => {\n            paid[payment.paidBy] += parseInt(payment.amount);\n        });\n\n\n        for(let i = 0, id = 0; i < n; i++){\n            let curr = personList[i];\n            for(let j = i + 1; j < n; j++){\n                let other = personList[j];\n                if(paid[curr.name] === paid[other.name])\n                    continue;\n\n                let transaction = Math.abs(paid[curr.name] - paid[other.name]);\n                transaction /= (n * 1.0);\n\n                if(paid[curr.name] >= paid[other.name])\n                    transactions.push([other, curr, transaction, id])\n                else\n                    transactions.push([curr, other, transaction, id])\n                ++id;\n            }\n        }\n\n        this.setState({\n            transactions : transactions,\n        });\n    }\n\n    getSteps = ()=>{\n        return(\n            this.state.transactions.map(\n                (edge)=>{\n                    return(\n                        <ListItem>\n                            <ListItemText primary= {edge[0] + \" pays to \" + edge[1]} secondary={edge[2]} />\n                        </ListItem>\n                    )\n                }\n            )\n        )\n    }\n\n    render() {\n        this.calculateTransactions();\n        return (\n            <div>\n            <Typography variant=\"h3\" gutterBottom>\n                Summary\n            </Typography>\n            <List style = {{\n                width: '100%',\n                maxWidth: 360,\n              }}\n            >\n                { this.getSteps() }\n            </List>\n            </div>\n        )\n    }\n}\n\nexport default Summary;"]},"metadata":{},"sourceType":"module"}