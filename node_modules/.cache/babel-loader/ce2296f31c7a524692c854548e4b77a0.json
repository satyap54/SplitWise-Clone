{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/satyabrat/Desktop/Learn/React/bill-split/src/Components/Summary.js\";\nimport React, { Component } from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nclass Summary extends Component {\n  constructor() {\n    this.setState({\n      operationList: []\n    });\n    this.calculateTransactions();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        gutterBottom: true,\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        style: {\n          width: '100%',\n          maxWidth: 360\n        },\n        children: this.getSteps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Summary;","map":{"version":3,"sources":["/home/satyabrat/Desktop/Learn/React/bill-split/src/Components/Summary.js"],"names":["React","Component","Typography","List","ListItem","ListItemText","Summary","constructor","setState","operationList","calculateTransactions","render","width","maxWidth","getSteps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAEA,MAAMC,OAAN,SAAsBL,SAAtB,CAA+B;AAC3BM,EAAAA,WAAW,GAAE;AACT,SAAKC,QAAL,CAAc;AACVC,MAAAA,aAAa,EAAG;AADN,KAAd;AAIA,SAAKC,qBAAL;AACH;;AAuDDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACA,QAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAyB,QAAA,YAAY,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAIA,QAAC,IAAD;AAAM,QAAA,KAAK,EAAI;AACXC,UAAAA,KAAK,EAAE,MADI;AAEXC,UAAAA,QAAQ,EAAE;AAFC,SAAf;AAAA,kBAKM,KAAKC,QAAL;AALN;AAAA;AAAA;AAAA;AAAA,cAJA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcH;;AA7E0B;;AAgF/B,eAAeR,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nclass Summary extends Component{\n    constructor(){\n        this.setState({\n            operationList : [],\n        });\n\n        this.calculateTransactions();\n    }\n\n    calculateTransactions = ()=>{\n        const {personList, paymentList, numberOfPeople} = this.props;\n        let paid = {}, n = numberOfPeople, willGet = {}, transactions = [];\n        personList.forEach(person => {\n            paid[person.name] = 0;\n            willGet[person.name] = 0;\n        });\n\n        paymentList.forEach(payment => {\n            paid[payment.paidBy] += parseInt(payment.amount);\n        });\n\n\n        for(let i = 0, id = 0; i < n; i++){\n            let curr = personList[i];\n            for(let j = i + 1; j < n; j++){\n                let other = personList[j];\n                if(paid[curr.name] === paid[other.name])\n                    continue;\n\n                let transaction = Math.abs(paid[curr.name] - paid[other.name]);\n                transaction /= (n * 1.0);\n\n                if(paid[curr.name] >= paid[other.name])\n                    transactions.push([other, curr, transaction, id])\n                else\n                    transactions.push([curr, other, transaction, id])\n                ++id;\n            }\n        }\n\n        this.setState({\n            operationList : [...transactions],\n        });\n\n        console.log(\"constructor call \", transactions, this.state.operationList);\n    }\n\n    getSteps = ()=>{\n        console.log(\"Inside get steps\", this.state.operationList);\n        return(\n            this.state.operationList.map(\n                (edge)=>{\n                    return(\n                        <ListItem>\n                            <ListItemText primary= {edge[0] + \" pays to \" + edge[1]} secondary={edge[2]} />\n                        </ListItem>\n                    )\n                }\n            )\n        )\n    }\n\n    render() {\n        return (\n            <div>\n            <Typography variant=\"h3\" gutterBottom>\n                Summary\n            </Typography>\n            <List style = {{\n                width: '100%',\n                maxWidth: 360,\n              }}\n            >\n                { this.getSteps() }\n            </List>\n            </div>\n        )\n    }\n}\n\nexport default Summary;"]},"metadata":{},"sourceType":"module"}