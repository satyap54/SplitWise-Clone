{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/satyabrat/Desktop/Learn/React/bill-split/src/Components/Summary.js\";\nimport React, { Component } from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nclass Summary extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      operationList: []\n    };\n\n    this.calculateTransactions = () => {\n      const {\n        personList,\n        paymentList,\n        numberOfPeople\n      } = this.props;\n      let paid = {},\n          n = numberOfPeople,\n          willGet = {},\n          transactions = [];\n      personList.forEach(person => {\n        paid[person.name] = 0;\n        willGet[person.name] = 0;\n      });\n      paymentList.forEach(payment => {\n        paid[payment.paidBy] += parseInt(payment.amount);\n      });\n\n      for (let i = 0, id = 0; i < n; i++) {\n        let curr = personList[i];\n\n        for (let j = i + 1; j < n; j++) {\n          let other = personList[j];\n          if (paid[curr.name] === paid[other.name]) continue;\n          let transaction = Math.abs(paid[curr.name] - paid[other.name]);\n          transaction /= n * 1.0;\n          if (paid[curr.name] >= paid[other.name]) transactions.push([other, curr, transaction, id]);else transactions.push([curr, other, transaction, id]);\n          ++id;\n        }\n      }\n\n      this.setState({\n        operationList: [...transactions]\n      });\n      console.log(\"constructor call \", transactions, this.state.operationList);\n    };\n\n    this.getSteps = () => {\n      console.log(\"Inside get steps\", this.state.operationList);\n      return this.state.operationList.map(edge => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: edge[0] + \" pays to \" + edge[1],\n            secondary: edge[2]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this);\n      });\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h3\",\n        gutterBottom: true,\n        children: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        style: {\n          width: '100%',\n          maxWidth: 360\n        },\n        children: this.getSteps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Summary;","map":{"version":3,"sources":["/home/satyabrat/Desktop/Learn/React/bill-split/src/Components/Summary.js"],"names":["React","Component","Typography","List","ListItem","ListItemText","Summary","state","operationList","calculateTransactions","personList","paymentList","numberOfPeople","props","paid","n","willGet","transactions","forEach","person","name","payment","paidBy","parseInt","amount","i","id","curr","j","other","transaction","Math","abs","push","setState","console","log","getSteps","map","edge","componentDidMount","render","width","maxWidth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nclass Summary extends Component{\n    state = {\n        operationList : [],\n    }\n\n    componentDidMount(){\n        \n    }\n\n    calculateTransactions = ()=>{\n        const {personList, paymentList, numberOfPeople} = this.props;\n        let paid = {}, n = numberOfPeople, willGet = {}, transactions = [];\n        personList.forEach(person => {\n            paid[person.name] = 0;\n            willGet[person.name] = 0;\n        });\n\n        paymentList.forEach(payment => {\n            paid[payment.paidBy] += parseInt(payment.amount);\n        });\n\n\n        for(let i = 0, id = 0; i < n; i++){\n            let curr = personList[i];\n            for(let j = i + 1; j < n; j++){\n                let other = personList[j];\n                if(paid[curr.name] === paid[other.name])\n                    continue;\n\n                let transaction = Math.abs(paid[curr.name] - paid[other.name]);\n                transaction /= (n * 1.0);\n\n                if(paid[curr.name] >= paid[other.name])\n                    transactions.push([other, curr, transaction, id])\n                else\n                    transactions.push([curr, other, transaction, id])\n                ++id;\n            }\n        }\n\n        this.setState({\n            operationList : [...transactions],\n        });\n\n        console.log(\"constructor call \", transactions, this.state.operationList);\n    }\n\n    getSteps = ()=>{\n        console.log(\"Inside get steps\", this.state.operationList);\n        return(\n            this.state.operationList.map(\n                (edge)=>{\n                    return(\n                        <ListItem>\n                            <ListItemText primary= {edge[0] + \" pays to \" + edge[1]} secondary={edge[2]} />\n                        </ListItem>\n                    )\n                }\n            )\n        )\n    }\n\n    render() {\n        return (\n            <div>\n            <Typography variant=\"h3\" gutterBottom>\n                Summary\n            </Typography>\n            <List style = {{\n                width: '100%',\n                maxWidth: 360,\n              }}\n            >\n                { this.getSteps() }\n            </List>\n            </div>\n        )\n    }\n}\n\nexport default Summary;"]},"metadata":{},"sourceType":"module"}